arSync%","scope":"resource"},"git.followTagsWhenSync":{"type":"boolean","scope":"resource","default":false,"description":"%config.followTagsWhenSync%"},"git.promptToSaveFilesBeforeStash":{"type":"string","enum":["always","staged","never"],"enumDescriptions":["%config.promptToSaveFilesBeforeStash.always%","%config.promptToSaveFilesBeforeStash.staged%","%config.promptToSaveFilesBeforeStash.never%"],"scope":"resource","default":"always","description":"%config.promptToSaveFilesBeforeStash%"},"git.promptToSaveFilesBeforeCommit":{"type":"string","enum":["always","staged","never"],"enumDescriptions":["%config.promptToSaveFilesBeforeCommit.always%","%config.promptToSaveFilesBeforeCommit.staged%","%config.promptToSaveFilesBeforeCommit.never%"],"scope":"resource","default":"always","description":"%config.promptToSaveFilesBeforeCommit%"},"git.postCommitCommand":{"type":"string","enum":["none","push","sync"],"enumDescriptions":["%config.postCommitCommand.none%","%config.postCommitCommand.push%","%config.postCommitCommand.sync%"],"markdownDescription":"%config.postCommitCommand%","scope":"resource","default":"none"},"git.rememberPostCommitCommand":{"type":"boolean","description":"%config.rememberPostCommitCommand%","scope":"resource","default":false},"git.openAfterClone":{"type":"string","enum":["always","alwaysNewWindow","whenNoFolderOpen","prompt"],"enumDescriptions":["%config.openAfterClone.always%","%config.openAfterClone.alwaysNewWindow%","%config.openAfterClone.whenNoFolderOpen%","%config.openAfterClone.prompt%"],"default":"prompt","description":"%config.openAfterClone%"},"git.showInlineOpenFileAction":{"type":"boolean","default":true,"description":"%config.showInlineOpenFileAction%"},"git.showPushSuccessNotification":{"type":"boolean","description":"%config.showPushSuccessNotification%","default":false},"git.inputValidation":{"type":"string","enum":["always","warn","off"],"default":"warn","description":"%config.inputValidation%"},"git.inputValidationLength":{"type":"number","default":72,"description":"%config.inputValidationLength%"},"git.inputValidationSubjectLength":{"type":["number","null"],"default":50,"markdownDescription":"%config.inputValidationSubjectLength%"},"git.detectSubmodules":{"type":"boolean","scope":"resource","default":true,"description":"%config.detectSubmodules%"},"git.detectSubmodulesLimit":{"type":"number","scope":"resource","default":10,"description":"%config.detectSubmodulesLimit%"},"git.alwaysShowStagedChangesResourceGroup":{"type":"boolean","scope":"resource","default":false,"description":"%config.alwaysShowStagedChangesResourceGroup%"},"git.alwaysSignOff":{"type":"boolean","scope":"resource","default":false,"description":"%config.alwaysSignOff%"},"git.ignoreSubmodules":{"type":"boolean","scope":"resource","default":false,"description":"%config.ignoreSubmodules%"},"git.ignoredRepositories":{"type":"array","items":{"type":"string"},"default":[],"scope":"window","description":"%config.ignoredRepositories%"},"git.scanRepositories":{"type":"array","items":{"type":"string"},"default":[],"scope":"resource","description":"%config.scanRepositories%"},"git.showProgress":{"type":"boolean","description":"%config.showProgress%","default":true,"scope":"resource"},"git.rebaseWhenSync":{"type":"boolean","scope":"resource","default":false,"description":"%config.rebaseWhenSync%"},"git.pullBeforeCheckout":{"type":"boolean","scope":"resource","default":false,"description":"%config.pullBeforeCheckout%"},"git.fetchOnPull":{"type":"boolean","scope":"resource","default":false,"description":"%config.fetchOnPull%"},"git.pruneOnFetch":{"type":"boolean","scope":"resource","default":false,"description":"%config.pruneOnFetch%"},"git.pullTags":{"type":"boolean","scope":"resource","default":true,"description":"%config.pullTags%"},"git.autoStash":{"type":"boolean","scope":"resource","default":false,"description":"%config.autoStash%"},"git.allowForcePush":{"type":"boolean","default":false,"description":"%config.allowForcePush%"},"git.useForcePushWithLease":{"type":"boolean","default":true,"description":"%config.useForcePushWithLease%eate(context) {
        const sourceCode = context.sourceCode;
        const enforceForClassMembers = context.options[0] && context.options[0].enforceForClassMembers;

        /**
         * Reports a given node if it violated this rule.
         * @param {ASTNode} node The node to check.
         * @returns {void}
         */
        function check(node) {
            if (hasUselessComputedKey(node)) {
                const { key } = node;

                context.report({
                    node,
                    messageId: "unnecessarilyComputedProperty",
                    data: { property: sourceCode.getText(key) },
                    fix(fixer) {
                        const leftSquareBracket = sourceCode.getTokenBefore(key, astUtils.isOpeningBracketToken);
                        const rightSquareBracket = sourceCode.getTokenAfter(key, astUtils.isClosingBracketToken);

                        // If there are comments between the brackets and the property name, don't do a fix.
                        if (sourceCode.commentsExistBetween(leftSquareBracket, rightSquareBracket)) {
                            return null;
                        }

                        const tokenBeforeLeftBracket = sourceCode.getTokenBefore(leftSquareBracket);

                        // Insert a space before the key to avoid changing identifiers, e.g. ({ get[2]() {} }) to ({ get2() {} })
                        const needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] &&
                            !astUtils.canTokensBeAdjacent(tokenBeforeLeftBracket, sourceCode.getFirstToken(key));

                        const replacementKey = (needsSpaceBeforeKey ? " " : "") + key.raw;

                        return fixer.replaceTextRange([leftSquareBracket.range[0], rightSquareBracket.range[1]], replacementKey);
                    }
                });
            }
        }

        /**
         * A no-op function to act as placeholder for checking a node when the `enforceForClassMembers` option is `false`.
         * @returns {void}
         * @private
         */
        function noop() {}

        return {
            Property: check,
            MethodDefinition: enforceForClassMembers ? check : noop,
            PropertyDefinition: enforceForClassMembers ? check : noop
        };
    }
};
